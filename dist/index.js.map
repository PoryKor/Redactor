{"version":3,"file":"index.js","sources":["../src/components/ToolbarButton.tsx","../src/utils.ts","../src/components/Toolbar.tsx","../src/components/Link.tsx","../src/components/Media.tsx","../src/components/Blockquote.tsx","../src/components/CodeBlock.tsx","../src/components/UrlPopover.tsx","../src/components/Autocomplete.tsx","../src/MUIRichTextEditor.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport IconButton from '@material-ui/core/IconButton'\nimport { TToolbarComponentProps, TToolbarButtonSize } from './Toolbar'\n\ninterface IToolbarButtonProps {\n    id?: string\n    editorId?: string\n    label: string\n    style: string\n    type: string\n    active?: boolean\n    icon?: JSX.Element\n    onClick?: any\n    inlineMode?: boolean\n    disabled?: boolean\n    size?: TToolbarButtonSize\n    component?: FunctionComponent<TToolbarComponentProps>\n}\n\nconst ToolbarButton: FunctionComponent<IToolbarButtonProps> = (props) => {\n    const size = !props.inlineMode ? (props.size || \"medium\") : \"small\"\n    const toolbarId = props.inlineMode ? \"-toolbar\" : \"\"\n    const editorId = props.editorId || \"mui-rte\"\n    const elemId = editorId + \"-\" + (props.id || props.label) + \"-button\" + toolbarId\n    const sharedProps = {\n        id: elemId,\n        onMouseDown: (e: React.MouseEvent) => {\n            e.preventDefault()\n            if (props.onClick) {\n                props.onClick(props.style, props.type, elemId, props.inlineMode)\n            }\n        },\n        disabled: props.disabled || false\n    }\n    if (props.icon) {\n        return (\n            <IconButton\n                {...sharedProps}\n                aria-label={props.label}\n                color={props.active ? \"primary\" : \"default\"}\n                size={size}\n            >\n                {props.icon}\n            </IconButton>\n        )\n    }\n    if (props.component) {\n        return (\n            <props.component\n                {...sharedProps}\n                active={props.active || false}\n            />\n        )\n    }\n    return null\n}\n\nexport default ToolbarButton\n","import {\n    EditorState, DraftBlockType, ContentBlock, ContentState,\n    Modifier, SelectionState, getVisibleSelectionRect, DraftStyleMap\n} from 'draft-js'\nimport Immutable from 'immutable'\nimport { TCustomControl } from './components/Toolbar'\n\nexport type TPosition = {\n    top: number\n    left: number\n}\n\nexport type TSelectionInfo = {\n    inlineStyle: Immutable.OrderedSet<string>,\n    blockType: DraftBlockType,\n    entityType: string,\n    linkKey: string\n    block: ContentBlock\n}\n\n/**\n * Get the current selection details\n */\nconst getSelectionInfo = (editorState: EditorState): TSelectionInfo => {\n    const selection = editorState.getSelection()\n    const startOffset = selection.getStartOffset()\n    const currentContent = editorState.getCurrentContent()\n    const contentBlock = currentContent.getBlockForKey(selection.getStartKey())\n    const currentStyle = editorState.getCurrentInlineStyle()\n    const linkKey = contentBlock.getEntityAt(startOffset)\n    let entityType = \"\"\n    if (linkKey) {\n        const linkInstance = currentContent.getEntity(linkKey)\n        entityType = linkInstance.getType()\n    }\n    return {\n        inlineStyle: currentStyle,\n        blockType: contentBlock.getType(),\n        entityType: entityType,\n        linkKey: linkKey,\n        block: contentBlock\n    }\n}\n\n/**\n * Remove a block from the ContentState\n */\nconst removeBlockFromMap = (editorState: EditorState, block: ContentBlock): ContentState => {\n    const contentState = editorState.getCurrentContent()\n    const removeBlockContentState = Modifier.removeRange(\n        contentState,\n        new SelectionState({\n            anchorKey: block.getKey(),\n            anchorOffset: 0,\n            focusKey: block.getKey(),\n            focusOffset: block.getLength(),\n        }),\n        'backward'\n    )\n    const blockMap = removeBlockContentState.getBlockMap().delete(block.getKey())\n    return removeBlockContentState.merge({\n        blockMap,\n        selectionAfter: contentState.getSelectionAfter()\n    }) as ContentState\n}\n\nconst atomicBlockExists = (name: string, controls?: TCustomControl[]) => {\n    if (!controls) {\n        return undefined\n    }\n    return controls.find(control =>\n        control.type === \"atomic\" &&\n        control.name === name &&\n        control.atomicComponent !== undefined)\n}\n\nconst isGreaterThan = (value: number, maxValue?: number): boolean => {\n    if (!maxValue) {\n        return false\n    }\n    return value > maxValue\n}\n\nconst clearInlineStyles = (editorState: EditorState, customStyles?: DraftStyleMap): ContentState => {\n    let styles = ['BOLD', 'ITALIC', 'UNDERLINE']\n    if (customStyles) {\n        styles = styles.concat(Object.getOwnPropertyNames(customStyles))\n    }\n    return styles.reduce((newContentState: ContentState, style: string) => (\n        Modifier.removeInlineStyle(newContentState, editorState.getSelection(), style)\n    ), editorState.getCurrentContent())\n}\n\nconst getEditorBounds = (editor: HTMLElement) => {\n    let fakeClientRect = getVisibleSelectionRect(window)\n    return {\n        selectionRect: fakeClientRect ? {\n            top: fakeClientRect?.top,\n            left: fakeClientRect?.left\n        } as TPosition : null,\n        editorRect: editor.getBoundingClientRect()\n    }\n}\n\nconst getLineNumber = (editorState: EditorState) => {\n    const currentBlockKey = editorState.getSelection().getStartKey()\n    return editorState.getCurrentContent().getBlockMap()\n        .keySeq().findIndex(k => k === currentBlockKey)\n}\n\nexport { getSelectionInfo, removeBlockFromMap, atomicBlockExists, isGreaterThan, clearInlineStyles, getEditorBounds, getLineNumber }\n","import React, { FunctionComponent, useState, useEffect } from 'react'\nimport { EditorState } from 'draft-js'\nimport FormatBoldIcon from '@material-ui/icons/FormatBold'\nimport FormatItalicIcon from '@material-ui/icons/FormatItalic'\nimport FormatUnderlinedIcon from '@material-ui/icons/FormatUnderlined'\nimport StrikethroughIcon from '@material-ui/icons/StrikethroughS'\nimport HighlightIcon from '@material-ui/icons/Highlight'\nimport TitleIcon from '@material-ui/icons/Title'\nimport InsertLinkIcon from '@material-ui/icons/InsertLink'\nimport PhotoLibraryIcon from '@material-ui/icons/PhotoLibrary'\nimport FormatListNumberedIcon from '@material-ui/icons/FormatListNumbered'\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted'\nimport FormatQuoteIcon from '@material-ui/icons/FormatQuote'\nimport CodeIcon from '@material-ui/icons/Code'\nimport FormatClearIcon from '@material-ui/icons/FormatClear'\nimport SaveIcon from '@material-ui/icons/Save'\nimport UndoIcon from '@material-ui/icons/Undo'\nimport RedoIcon from '@material-ui/icons/Redo'\nimport ToolbarButton from './ToolbarButton'\nimport { getSelectionInfo } from '../utils'\n\nexport type TToolbarControl =\n    \"title\" | \"bold\" | \"italic\" | \"underline\" | \"link\" | \"numberList\" |\n    \"bulletList\" | \"quote\" | \"code\" | \"clear\" | \"save\" | \"media\" |\n    \"strikethrough\" | \"highlight\" | string\n\nexport type TControlType = \"inline\" | \"block\" | \"callback\" | \"atomic\"\n\nexport type TToolbarButtonSize = \"small\" | \"medium\"\n\nexport type TToolbarComponentProps = {\n    id: string,\n    onMouseDown: (e: React.MouseEvent) => void,\n    active: boolean,\n    disabled: boolean\n}\n\nexport type TCustomControl = {\n    id?: string\n    name: string\n    icon?: JSX.Element\n    type: TControlType\n    component?: FunctionComponent<TToolbarComponentProps>\n    inlineStyle?: React.CSSProperties\n    blockWrapper?: React.ReactElement\n    atomicComponent?: FunctionComponent\n    onClick?: (editorState: EditorState, name: string, anchor: HTMLElement | null) => EditorState | void\n}\n\ntype TStyleType = {\n    id?: string\n    name: TToolbarControl | string\n    label: string\n    style: string\n    icon?: JSX.Element\n    component?: FunctionComponent<TToolbarComponentProps>\n    type: TControlType\n    active?: boolean\n    clickFnName?: string\n}\n\ntype TToolbarProps = {\n    id: string\n    editorState: EditorState\n    controls?: Array<TToolbarControl>\n    customControls?: TCustomControl[]\n    onClick: (style: string, type: string, id: string, inlineMode?: boolean) => void\n    inlineMode?: boolean\n    className?: string\n    disabled?: boolean\n    size?: TToolbarButtonSize\n    isActive: boolean\n}\n\nconst STYLE_TYPES: TStyleType[] = [\n    {\n        label: 'H2',\n        name: \"title\",\n        style: 'header-two',\n        icon: <TitleIcon />,\n        type: \"block\"\n    },\n    {\n        label: 'Bold',\n        name: \"bold\",\n        style: 'BOLD',\n        icon: <FormatBoldIcon />,\n        type: \"inline\"\n    },\n    {\n        label: 'Italic',\n        name: \"italic\",\n        style: 'ITALIC',\n        icon: <FormatItalicIcon />,\n        type: \"inline\"\n    },\n    {\n        label: 'Underline',\n        name: \"underline\",\n        style: 'UNDERLINE',\n        icon: <FormatUnderlinedIcon />,\n        type: \"inline\"\n    },\n    {\n        label: 'Strikethrough',\n        name: \"strikethrough\",\n        style: 'STRIKETHROUGH',\n        icon: <StrikethroughIcon />,\n        type: \"inline\"\n    },\n    {\n        label: 'Highlight',\n        name: \"highlight\",\n        style: 'HIGHLIGHT',\n        icon: <HighlightIcon />,\n        type: \"inline\"\n    },\n    {\n        label: 'Undo',\n        name: \"undo\",\n        style: \"UNDO\",\n        icon: <UndoIcon />,\n        type: \"callback\",\n    },\n    {\n        label: 'Redo',\n        name: \"redo\",\n        style: \"REDO\",\n        icon: <RedoIcon />,\n        type: \"callback\",\n    },\n    {\n        label: 'Link',\n        name: \"link\",\n        style: 'LINK',\n        icon: <InsertLinkIcon />,\n        type: \"callback\",\n        id: \"link-control\"\n    },\n    {\n        label: 'Media',\n        name: \"media\",\n        style: 'IMAGE',\n        icon: <PhotoLibraryIcon />,\n        type: \"callback\",\n        id: \"media-control\"\n    },\n    {\n        label: 'UL',\n        name: \"bulletList\",\n        style: 'unordered-list-item',\n        icon: <FormatListBulletedIcon />,\n        type: \"block\"\n    },\n    {\n        label: 'OL',\n        name: \"numberList\",\n        style: 'ordered-list-item',\n        icon: <FormatListNumberedIcon />,\n        type: \"block\"\n    },\n    {\n        label: 'Blockquote',\n        name: \"quote\",\n        style: 'blockquote',\n        icon: <FormatQuoteIcon />,\n        type: \"block\"\n    },\n    {\n        label: 'Code Block',\n        name: \"code\",\n        style: 'code-block',\n        icon: <CodeIcon />,\n        type: \"block\"\n    },\n    {\n        label: 'Clear',\n        name: \"clear\",\n        style: 'clear',\n        icon: <FormatClearIcon />,\n        type: \"callback\"\n    },\n    {\n        label: 'Save',\n        name: \"save\",\n        style: 'save',\n        icon: <SaveIcon />,\n        type: \"callback\"\n    }\n]\n\nconst Toolbar: FunctionComponent<TToolbarProps> = (props) => {\n    const [availableControls, setAvailableControls] = useState(props.controls ? [] : STYLE_TYPES)\n    const { editorState } = props\n    const id = props.inlineMode ? \"-inline-toolbar\" : \"-toolbar\"\n\n    useEffect(() => {\n        if (!props.controls) {\n            return\n        }\n        const filteredControls: TStyleType[] = []\n        const controls = props.controls.filter((control, index) => props.controls!.indexOf(control) >= index)\n        controls.forEach(name => {\n            const style = STYLE_TYPES.find(style => style.name === name)\n            if (style) {\n                filteredControls.push(style)\n            }\n            else if (props.customControls) {\n                const customControl = props.customControls.find(style => style.name === name)\n                if (customControl && customControl.type !== \"atomic\" &&\n                    (customControl.icon || customControl.component)) {\n                    filteredControls.push({\n                        id: customControl.id || (customControl.name + \"Id\"),\n                        name: customControl.name,\n                        label: customControl.name,\n                        style: customControl.name.toUpperCase(),\n                        icon: customControl.icon,\n                        component: customControl.component,\n                        type: customControl.type,\n                        clickFnName: \"onCustomClick\"\n                    })\n                }\n            }\n        })\n        setAvailableControls(filteredControls)\n    }, [props.controls, props.customControls])\n\n    return (\n        <div id={`${props.id}${id}`} className={props.className}>\n            {availableControls.map(style => {\n                if (props.inlineMode &&\n                    (style.type !== \"inline\" && (style.name !== \"link\" && style.name !== \"clear\"))) {\n                    return null\n                }\n                let active = false\n                const action = props.onClick\n                if (!props.isActive) {\n                    active = false\n                }\n                else if (style.type === \"inline\") {\n                    active = editorState.getCurrentInlineStyle().has(style.style)\n                }\n                else if (style.type === \"block\") {\n                    const selection = editorState.getSelection()\n                    const block = editorState.getCurrentContent().getBlockForKey(selection.getStartKey())\n                    if (block) {\n                        active = style.style === block.getType()\n                    }\n                }\n                else {\n                    if (style.style === \"IMAGE\" || style.style === \"LINK\") {\n                        active = style.style === getSelectionInfo(editorState).entityType\n                    }\n                }\n\n                return (\n                    <ToolbarButton\n                        id={style.id}\n                        editorId={props.id}\n                        key={`key-${style.label}`}\n                        active={active}\n                        label={style.label}\n                        onClick={action}\n                        style={style.style}\n                        type={style.type}\n                        icon={style.icon}\n                        component={style.component}\n                        inlineMode={props.inlineMode}\n                        disabled={props.disabled}\n                        size={props.size}\n                    />\n                )\n            })}\n        </div>\n    )\n}\nexport default Toolbar\n","import React, { FunctionComponent } from 'react'\nimport { ContentState } from 'draft-js'\nimport MuiLink from '@material-ui/core/Link'\n\ntype TLinkProps = {\n    children?: React.ReactNode\n    contentState: ContentState\n    entityKey: string\n}\n\nconst Link: FunctionComponent<TLinkProps> = (props) => {\n    const { url, className } = props.contentState.getEntity(props.entityKey).getData()\n    return (\n        <MuiLink\n            href={url}\n            className={`${className} editor-anchor`}\n            target=\"_blank\"\n        >\n            {props.children}\n        </MuiLink>\n    )\n}\n\nexport default Link\n","import React, { FunctionComponent } from 'react'\nimport classNames from 'classnames'\nimport { ContentState, ContentBlock } from 'draft-js'\nimport { createStyles, withStyles, WithStyles, Theme } from '@material-ui/core/styles'\n\ninterface IMediaProps extends WithStyles<typeof styles> {\n    block: ContentBlock\n    contentState: ContentState\n    blockProps: any\n    onClick: (block: ContentBlock) => void\n}\n\nconst styles = ({ shadows }: Theme) => createStyles({\n    root: {\n        margin: \"5px 0 1px\",\n        outline: \"none\"\n    },\n    editable: {\n        cursor: \"pointer\",\n        \"&:hover\": {\n            boxShadow: shadows[3]\n        }\n    },\n    focused: {\n        boxShadow: shadows[3]\n    },\n    centered: {\n        textAlign: \"center\"\n    },\n    leftAligned: {\n        textAlign: \"left\"\n    },\n    rightAligned: {\n        textAlign: \"right\"\n    }\n})\n\nconst Media: FunctionComponent<IMediaProps> = (props) => {\n    const { url, width, height, alignment, type, text } = props.contentState.getEntity(props.block.getEntityAt(0)).getData()\n    const { onClick, readOnly, focusKey } = props.blockProps\n\n    const htmlTag = () => {\n        const componentProps = {\n            src: url,\n            className: classNames(props.classes.root, {\n                [props.classes.editable]: !readOnly,\n                [props.classes.focused]: !readOnly && focusKey === props.block.getKey()\n            }),\n            width: width,\n            height: type === \"video\" ? \"auto\" : height,\n            onClick: () => {\n                if (readOnly) {\n                    return\n                }\n                onClick(props.block)\n            }\n        }\n\n        if (!type || type === \"image\") {\n            return <div className='article-media m-mini'><figure className='image article-media__art'><img {...componentProps} /></figure><figcaption className='article-media__text'><span className='article-media__about'>{text}</span></figcaption></div>\n           \n        }\n        if (type === \"video\") {\n            return <video {...componentProps} autoPlay={false} controls />\n        }\n        return null\n    }\n\n    return (\n        <div className={classNames({\n            [props.classes.centered]: alignment === \"center\",\n            [props.classes.leftAligned]: alignment === \"left\",\n            [props.classes.rightAligned]: alignment === \"right\"\n        })}>\n            {htmlTag()}\n        </div>\n    )\n}\n\nexport default withStyles(styles, { withTheme: true })(Media)\n","import React, { FunctionComponent } from 'react'\nimport { createStyles, withStyles, WithStyles, Theme } from '@material-ui/core/styles'\n\nconst styles = ({ palette }: Theme) => createStyles({\n    root: {\n        fontStyle: \"italic\",\n        color: palette.grey[800],\n        borderLeft: `4px solid ${palette.grey.A100}`\n    }\n})\n\ninterface IBlockquoteProps extends WithStyles<typeof styles> {\n    children?: React.ReactNode\n}\n\nconst Blockquote: FunctionComponent<IBlockquoteProps> = (props) => {\n    return (\n        <div className={props.classes.root}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default withStyles(styles, { withTheme: true })(Blockquote)\n","import React, { FunctionComponent } from 'react'\nimport { createStyles, withStyles, WithStyles, Theme } from '@material-ui/core/styles'\n\nconst styles = ({ spacing, palette }: Theme) => createStyles({\n    root: {\n        backgroundColor: palette.grey[200],\n        padding: spacing(1, 2, 1, 2)\n    }\n})\n\ninterface IBlockquoteProps extends WithStyles<typeof styles> {\n    children?: React.ReactNode\n}\n\nconst CodeBlock: FunctionComponent<IBlockquoteProps> = (props) => {\n    return (\n        <div className={props.classes.root}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default withStyles(styles, { withTheme: true })(CodeBlock)\n","import React, { FunctionComponent, useState } from 'react'\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\nimport Popover from '@material-ui/core/Popover'\nimport TextField from '@material-ui/core/TextField'\nimport { createStyles, withStyles, WithStyles, Theme } from '@material-ui/core/styles'\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\nimport InsertPhotoIcon from '@material-ui/icons/InsertPhoto'\nimport MovieIcon from '@material-ui/icons/Movie'\nimport CheckIcon from '@material-ui/icons/Check'\nimport DeleteIcon from '@material-ui/icons/DeleteOutline'\nimport FormatAlignCenter from '@material-ui/icons/FormatAlignCenter'\nimport FormatAlignLeft from '@material-ui/icons/FormatAlignLeft'\nimport FormatAlignRight from '@material-ui/icons/FormatAlignRight'\n\nexport type TAlignment = \"left\" | \"center\" | \"right\"\n\nexport type TMediaType = \"image\" | \"video\"\n\nexport type TUrlData = {\n    url?: string\n    width?: number\n    height?: number\n    alignment?: TAlignment\n    type?: TMediaType\n}\n\ninterface IUrlPopoverStateProps extends WithStyles<typeof styles> {\n    anchor?: HTMLElement\n    data?: TUrlData\n    isMedia?: boolean\n    onConfirm: (isMedia?: boolean, ...args: any) => void\n}\n\nconst styles = ({ spacing }: Theme) => createStyles({\n    linkPopover: {\n        padding: spacing(2, 2, 2, 2),\n        maxWidth: 250\n    },\n    linkTextField: {\n        width: \"100%\"\n    }\n})\n\nconst UrlPopover: FunctionComponent<IUrlPopoverStateProps> = (props) => {\n    const [data, setData] = useState<TUrlData>(props.data || {\n        url: undefined,\n        width: undefined,\n        height: undefined,\n        alignment: undefined,\n        type: undefined\n    })\n\n    const { classes } = props\n\n    const onSizeChange = (value: any, prop: \"width\" | \"height\") => {\n        if (value === \"\") {\n            setData({ ...data, [prop]: undefined })\n            return\n        }\n        const intValue = parseInt(value, 10)\n        if (isNaN(intValue)) {\n            return\n        }\n        setData({ ...data, [prop]: intValue })\n    }\n\n    return (\n        <Popover\n            open={props.anchor !== undefined}\n            anchorEl={props.anchor}\n            anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"left\"\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'left',\n            }}\n        >\n            <div className={classes.linkPopover}>\n                <Grid container spacing={1}>\n                    <Grid container item xs spacing={1}>\n                        <Grid item xs={12}>\n                            <TextField\n                                className={classes.linkTextField}\n                                onChange={(event) => setData({...data, url: event.target.value})}\n                                label=\"URL\"\n                                defaultValue={props.data && props.data.url}\n                                autoFocus={true}\n                                InputLabelProps={{\n                                    shrink: true\n                                }}\n                            />\n                        </Grid>\n                        {props.isMedia ?\n                            <>\n                                <Grid item xs={12}>\n                                    <ButtonGroup fullWidth>\n                                        <Button \n                                            color={(!data.type || data.type === \"image\") ? \"primary\" : \"default\"} \n                                            size=\"small\" \n                                            onClick={() => setData({...data, type: \"image\"})}\n                                        >\n                                            <InsertPhotoIcon />\n                                        </Button>\n                                        <Button \n                                            color={data.type === \"video\" ? \"primary\" : \"default\"} \n                                            size=\"small\" \n                                            onClick={() => setData({...data, type: \"video\"})}\n                                        >\n                                            <MovieIcon />\n                                        </Button>\n                                    </ButtonGroup>\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <TextField\n                                        onChange={(event) => onSizeChange(event.target.value, \"width\")}\n                                        value={data.width || \"\"}\n                                        label=\"Width\"\n                                        InputLabelProps={{\n                                            shrink: true\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <TextField\n                                        onChange={(event) => onSizeChange(event.target.value, \"height\")}\n                                        value={data.height || \"\"}\n                                        label=\"Height\"\n                                        InputLabelProps={{\n                                            shrink: true\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <ButtonGroup fullWidth>\n                                        <Button \n                                            color={data.alignment === \"left\" ? \"primary\" : \"default\"} \n                                            size=\"small\" \n                                            onClick={() => setData({...data, alignment: \"left\"})}\n                                        >\n                                            <FormatAlignLeft />\n                                        </Button>\n                                        <Button \n                                            color={data.alignment === \"center\" ? \"primary\" : \"default\"} \n                                            size=\"small\" \n                                            onClick={() => setData({...data, alignment: \"center\"})}\n                                        >\n                                            <FormatAlignCenter />\n                                        </Button>\n                                        <Button \n                                            color={data.alignment === \"right\" ? \"primary\" : \"default\"} \n                                            size=\"small\" \n                                            onClick={() => setData({...data, alignment: \"right\"})}>\n                                            <FormatAlignRight />\n                                        </Button>\n                                    </ButtonGroup>\n                                </Grid>\n                            </>\n                            : null}\n                    </Grid>\n                    <Grid container item xs={12} direction=\"row\" justify=\"flex-end\">\n                        {props.data && props.data.url ?\n                        <Button\n                            onClick={() => props.onConfirm(props.isMedia, \"\")}\n                        >\n                            <DeleteIcon />\n                        </Button>\n                        : null }\n                        <Button\n                            onClick={() => props.onConfirm(props.isMedia, data.url, data.width, data.height, data.alignment, data.type)}\n                        >\n                            <CheckIcon />\n                        </Button>\n                    </Grid>\n                </Grid>\n            </div>\n        </Popover>\n    )\n}\n\nexport default withStyles(styles, { withTheme: true })(UrlPopover)\n","import React, { FunctionComponent } from 'react'\nimport Paper from '@material-ui/core/Paper'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport { createStyles, withStyles, WithStyles } from '@material-ui/core/styles'\n\nexport type TAutocompleteItem = {\n    keys: string[]\n    value: any\n    content: string | JSX.Element\n}\n\ninterface TAutocompleteProps extends WithStyles<typeof styles> {\n    items: TAutocompleteItem[]\n    top: number\n    left: number\n    selectedIndex: number\n    onClick: (selectedIndex: number) => void\n}\n\nconst styles = () => createStyles({\n    container: {\n        minWidth: \"200px\",\n        position: \"absolute\",\n        zIndex: 10\n    },\n    item: {\n        cursor: \"pointer\"\n    }\n})\n\nconst Autocomplete: FunctionComponent<TAutocompleteProps> = (props) => {\n    if (!props.items.length) {\n        return null\n    }\n\n    const { classes } = props\n    return (\n        <Paper className={classes.container} style={{\n            top: props.top,\n            left: props.left\n        }}>\n            <List dense={true}>\n                {props.items.map((item, index) => (\n                    <ListItem\n                        key={index}\n                        className={classes.item}\n                        selected={index === props.selectedIndex}\n                        onClick={() => props.onClick(index)}\n                    >\n                        {item.content}\n                    </ListItem>\n                ))}\n            </List>\n        </Paper>\n    )\n}\n\nexport default withStyles(styles, { withTheme: true })(Autocomplete)\n","import React, {\n    FunctionComponent, useEffect, useState, useRef,\n    forwardRef, useImperativeHandle, RefForwardingComponent\n} from 'react'\nimport Immutable from 'immutable'\nimport classNames from 'classnames'\nimport { createStyles, withStyles, WithStyles, Theme } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\nimport {\n    Editor, EditorState, convertFromRaw, RichUtils, AtomicBlockUtils,\n    CompositeDecorator, convertToRaw, DefaultDraftBlockRenderMap, DraftEditorCommand,\n    DraftHandleValue, DraftStyleMap, ContentBlock, DraftDecorator,\n    SelectionState, KeyBindingUtil, getDefaultKeyBinding, Modifier, DraftBlockRenderMap\n} from 'draft-js'\nimport Toolbar, { TToolbarControl, TCustomControl, TToolbarButtonSize } from './components/Toolbar'\nimport Link from './components/Link'\nimport Media from './components/Media'\nimport Blockquote from './components/Blockquote'\nimport CodeBlock from './components/CodeBlock'\nimport UrlPopover, { TAlignment, TUrlData, TMediaType } from './components/UrlPopover'\nimport Autocomplete, { TAutocompleteItem } from './components/Autocomplete'\nimport { getSelectionInfo, removeBlockFromMap, atomicBlockExists, isGreaterThan, clearInlineStyles, getEditorBounds, getLineNumber, TPosition } from './utils'\n\nexport type TDecorator = {\n    component: FunctionComponent\n    regex: RegExp\n}\n\nexport type TAutocompleteStrategy = {\n    triggerChar: string\n    items: TAutocompleteItem[]\n    insertSpaceAfter?: boolean\n    atomicBlockName?: string\n}\n\nexport type TAutocomplete = {\n    strategies: TAutocompleteStrategy[]\n    suggestLimit?: number\n}\n\nexport type TAsyncAtomicBlockResponse = {\n    data: any\n}\n\nexport type TMUIRichTextEditorRef = {\n    focus: () => void\n    save: () => void\n    /**\n     * @deprecated Use `insertAtomicBlockSync` instead.\n     */\n    insertAtomicBlock: (name: string, data: any) => void\n    insertAtomicBlockSync: (name: string, data: any) => void\n    insertAtomicBlockAsync: (name: string, promise: Promise<TAsyncAtomicBlockResponse>, placeholder?: string) => void\n}\n\nexport type TDraftEditorProps = {\n    spellCheck?: boolean\n    stripPastedStyles?: boolean\n    handleDroppedFiles?: (selectionState: SelectionState, files: Blob[]) => DraftHandleValue\n}\n\nexport type TKeyCommand = {\n    key: number\n    name: string\n    callback: (state: EditorState) => EditorState\n}\n\nexport type TMUIRichTextEditorProps = {\n    id?: string\n    /**\n     * @deprecated Use `defaultValue` instead.\n     */\n    value?: any\n    defaultValue?: any\n    label?: string\n    readOnly?: boolean\n    inheritFontSize?: boolean\n    error?: boolean\n    controls?: Array<TToolbarControl>\n    customControls?: TCustomControl[]\n    decorators?: TDecorator[]\n    toolbar?: boolean\n    toolbarButtonSize?: TToolbarButtonSize\n    inlineToolbar?: boolean\n    inlineToolbarControls?: Array<TToolbarControl>\n    draftEditorProps?: TDraftEditorProps\n    keyCommands?: TKeyCommand[]\n    maxLength?: number\n    autocomplete?: TAutocomplete\n    onSave?: (data: string) => void\n    onChange?: (state: EditorState) => void\n    onFocus?: () => void\n    onBlur?: () => void\n}\n\ninterface IMUIRichTextEditorProps extends TMUIRichTextEditorProps, WithStyles<typeof styles> { }\n\ntype TMUIRichTextEditorState = {\n    anchorUrlPopover?: HTMLElement\n    urlKey?: string\n    urlData?: TUrlData\n    urlIsMedia?: boolean\n    toolbarPosition?: TPosition\n}\n\ntype TStateOffset = {\n    start: number\n    end: number\n}\n\nconst styles = ({ spacing, typography, palette }: Theme) => createStyles({\n    root: {\n    },\n    container: {\n        margin: spacing(1, 0, 0, 0),\n        position: \"relative\",\n        fontFamily: typography.body1.fontFamily,\n        fontSize: typography.body1.fontSize,\n        '& figure': {\n            margin: 0\n        }\n    },\n    inheritFontSize: {\n        fontSize: \"inherit\"\n    },\n    editor: {\n    },\n    editorContainer: {\n        margin: spacing(1, 0, 0, 0),\n        cursor: \"text\",\n        width: \"100%\",\n        padding: spacing(0, 0, 1, 0)\n    },\n    editorReadOnly: {\n        borderBottom: \"none\"\n    },\n    error: {\n        borderBottom: \"2px solid red\"\n    },\n    hidePlaceholder: {\n        display: \"none\"\n    },\n    placeHolder: {\n        color: palette.grey[600],\n        position: \"absolute\",\n        outline: \"none\"\n    },\n    linkPopover: {\n        padding: spacing(2, 2, 2, 2)\n    },\n    linkTextField: {\n        width: \"100%\"\n    },\n    anchorLink: {\n    },\n    toolbar: {\n    },\n    inlineToolbar: {\n        maxWidth: \"180px\",\n        position: \"absolute\",\n        padding: \"5px\",\n        zIndex: 10\n    }\n})\n\nconst blockRenderMap = Immutable.Map({\n    'blockquote': {\n        element: \"blockquote\",\n        wrapper: <Blockquote />\n    },\n    'code-block': {\n        element: \"pre\",\n        wrapper: <CodeBlock />\n    }\n})\nconst styleRenderMap: DraftStyleMap = {\n    'STRIKETHROUGH': {\n        textDecoration: \"line-through\"\n    },\n    'HIGHLIGHT': {\n        backgroundColor: \"yellow\"\n    }\n}\n\nconst { hasCommandModifier } = KeyBindingUtil\nconst autocompleteMinSearchCharCount = 2\nconst lineHeight = 26\nconst defaultInlineToolbarControls = [\"bold\", \"italic\", \"underline\", \"clear\"]\n\nconst findLinkEntities = (contentBlock: any, callback: any, contentState: any) => {\n    contentBlock.findEntityRanges(\n        (character: any) => {\n            const entityKey = character.getEntity()\n            return (\n                entityKey !== null &&\n                contentState.getEntity(entityKey).getType() === 'LINK'\n            )\n        },\n        callback\n    )\n}\n\nconst findDecoWithRegex = (regex: RegExp, contentBlock: any, callback: any) => {\n    const text = contentBlock.getText()\n    let matchArr, start\n    while ((matchArr = regex.exec(text)) !== null) {\n        start = matchArr.index\n        callback(start, start + matchArr[0].length)\n    }\n}\n\nconst useEditorState = (props: IMUIRichTextEditorProps) => {\n    const decorators: DraftDecorator[] = [\n        {\n            strategy: findLinkEntities,\n            component: Link,\n        }\n    ]\n    if (props.decorators) {\n        props.decorators.forEach(deco => decorators.push({\n            strategy: (contentBlock: any, callback: any) => {\n                findDecoWithRegex(deco.regex, contentBlock, callback)\n            },\n            component: deco.component\n        }))\n    }\n    const decorator = new CompositeDecorator(decorators)\n    const defaultValue = props.defaultValue || props.value\n    return (defaultValue)\n        ? EditorState.createWithContent(convertFromRaw(JSON.parse(defaultValue)), decorator)\n        : EditorState.createEmpty(decorator)\n}\n\nconst MUIRichTextEditor: RefForwardingComponent<TMUIRichTextEditorRef, IMUIRichTextEditorProps> = (props, ref) => {\n    const { classes, controls, customControls } = props\n\n    const [state, setState] = useState<TMUIRichTextEditorState>({})\n    const [focus, setFocus] = useState(false)\n    const [searchTerm, setSearchTerm] = useState(\"\")\n    const [selectedIndex, setSelectedIndex] = useState<number>(0)\n    const [editorState, setEditorState] = useState(() => useEditorState(props))\n    const [focusMediaKey, setFocusMediaKey] = useState(\"\")\n\n    const editorRef = useRef<Editor>(null)\n    const editorId = props.id || \"mui-rte\"\n    const toolbarPositionRef = useRef<TPosition | undefined>(undefined)\n    const editorStateRef = useRef<EditorState | null>(editorState)\n    const autocompleteRef = useRef<TAutocompleteStrategy | undefined>(undefined)\n    const autocompleteSelectionStateRef = useRef<SelectionState | undefined>(undefined)\n    const autocompletePositionRef = useRef<TPosition | undefined>(undefined)\n    const autocompleteLimit = props.autocomplete ? props.autocomplete.suggestLimit || 5 : 5\n    const isFirstFocus = useRef(true)\n    const customBlockMapRef = useRef<DraftBlockRenderMap | undefined>(undefined)\n    const customStyleMapRef = useRef<DraftStyleMap | undefined>(undefined)\n    const isFocusedWithMouse = useRef(false)\n    const selectionRef = useRef<TStateOffset>({\n        start: 0,\n        end: 0\n    })\n\n    /**\n     * Exposed methods\n     */\n    useImperativeHandle(ref, () => ({\n        focus: () => {\n            handleFocus()\n        },\n        save: () => {\n            handleSave()\n        },\n        insertAtomicBlock: (name: string, data: any) => {\n            handleInsertAtomicBlockSync(name, data)\n        },\n        insertAtomicBlockSync: (name: string, data: any) => {\n            handleInsertAtomicBlockSync(name, data)\n        },\n        insertAtomicBlockAsync: (name: string, promise: Promise<TAsyncAtomicBlockResponse>, placeholder?: string) => {\n            handleInsertAtomicBlockAsync(name, promise, placeholder)\n        }\n    }))\n\n    useEffect(() => {\n        const editorState = useEditorState(props)\n        setEditorState(editorState)\n        toggleMouseUpListener(true)\n        return () => {\n            toggleMouseUpListener()\n        }\n    }, [props.value, props.defaultValue])\n\n    useEffect(() => {\n        if (props.onChange) {\n            props.onChange(editorState)\n        }\n        editorStateRef.current = editorState\n    }, [editorState])\n\n    useEffect(() => {\n        toolbarPositionRef.current = state.toolbarPosition\n    }, [state.toolbarPosition])\n\n    useEffect(() => {\n        if (searchTerm.length < autocompleteMinSearchCharCount) {\n            setSelectedIndex(0)\n        }\n    }, [searchTerm])\n\n    const clearSearch = () => {\n        setSearchTerm(\"\")\n        autocompletePositionRef.current = undefined\n        autocompleteSelectionStateRef.current = undefined\n    }\n\n    const handleMouseUp = (event: any) => {\n        const nodeName = event.target.nodeName\n        clearSearch()\n        if (nodeName === \"IMG\" || nodeName === \"VIDEO\") {\n            return\n        }\n        setTimeout(() => {\n            const selection = editorStateRef.current!.getSelection()\n            if (selection.isCollapsed() || (toolbarPositionRef !== undefined &&\n                selectionRef.current.start === selection.getStartOffset() &&\n                selectionRef.current.end === selection.getEndOffset())) {\n                const selectionInfo = getSelectionInfo(editorStateRef.current!)\n                if (selectionInfo.entityType === \"IMAGE\") {\n                    focusMedia(selectionInfo.block)\n                    return\n                }\n                setState({\n                    ...state,\n                    toolbarPosition: undefined\n                })\n                return\n            }\n\n            selectionRef.current = {\n                start: selection.getStartOffset(),\n                end: selection.getEndOffset()\n            }\n\n            const editor: HTMLElement = (editorRef.current as any)?.editor\n            if (!editor) {\n                return\n            }\n            const { editorRect, selectionRect } = getEditorBounds(editor)\n            if (!selectionRect) {\n                return\n            }\n            const position = {\n                top: editor.offsetTop - 48 + (selectionRect.top - editorRect.top),\n                left: editor.offsetLeft + (selectionRect.left - editorRect.left)\n            }\n            setState({\n                ...state,\n                toolbarPosition: position\n            })\n        }, 1)\n    }\n\n    const findAutocompleteStrategy = (chars: string): TAutocompleteStrategy | undefined => {\n        if (!props.autocomplete) {\n            return undefined\n        }\n        const acArray = props.autocomplete.strategies.filter(ac => ac.triggerChar === chars)\n        if (acArray.length) {\n            return acArray[0]\n        }\n        return undefined\n    }\n\n    const updateAutocompletePosition = () => {\n        const editor: HTMLElement = (editorRef.current as any)?.editor\n        if (!editor) {\n            return\n        }\n        const { editorRect, selectionRect } = getEditorBounds(editor)\n        const line = getLineNumber(editorState)\n        const top = selectionRect ? selectionRect.top : editorRect.top + (lineHeight * line)\n        const left = selectionRect ? selectionRect.left : editorRect.left\n        const position = {\n            top: editor.offsetTop + (top - editorRect.top) + lineHeight,\n            left: editor.offsetLeft + (left - editorRect.left)\n        }\n        if (!autocompleteSelectionStateRef.current) {\n            autocompleteSelectionStateRef.current = editorStateRef.current!.getSelection()\n        }\n        autocompletePositionRef.current = position\n    }\n\n    const insertAutocompleteSuggestionAsAtomicBlock = (name: string, selection: SelectionState, value: any) => {\n        const block = atomicBlockExists(name, props.customControls)\n        if (!block) {\n            return\n        }\n        const contentState = Modifier.removeRange(editorStateRef.current!.getCurrentContent(),\n            selection,\n            \"forward\")\n        const newEditorState = EditorState.push(editorStateRef.current!, contentState, \"remove-range\")\n        const withAtomicBlock = insertAtomicBlock(newEditorState, name.toUpperCase(), {\n            value: value\n        }, {\n            selection: newEditorState.getCurrentContent().getSelectionAfter()\n        })\n        handleChange(withAtomicBlock)\n    }\n\n    const insertAutocompleteSuggestionAsText = (selection: SelectionState, value: string) => {\n        const currentContentState = editorState.getCurrentContent()\n        const entityKey = currentContentState.createEntity(\"AC_ITEM\", 'IMMUTABLE').getLastCreatedEntityKey()\n        const contentState = Modifier.replaceText(editorStateRef.current!.getCurrentContent(),\n            selection,\n            value,\n            editorStateRef.current!.getCurrentInlineStyle(),\n            entityKey)\n        const newEditorState = EditorState.push(editorStateRef.current!, contentState, \"insert-characters\")\n        if (autocompleteRef.current!.insertSpaceAfter === false) {\n            handleChange(newEditorState)\n        } else {\n            const addSpaceState = Modifier.insertText(newEditorState.getCurrentContent(),\n                newEditorState.getSelection(), \" \",\n                newEditorState.getCurrentInlineStyle())\n            handleChange(EditorState.push(newEditorState, addSpaceState, \"insert-characters\"))\n        }\n    }\n\n    const handleAutocompleteSelected = (index?: number) => {\n        const itemIndex = index || selectedIndex\n        const items = getAutocompleteItems()\n        if (items.length > itemIndex) {\n            const item = items[itemIndex]\n            const currentSelection = autocompleteSelectionStateRef.current!\n            const offset = currentSelection.getFocusOffset() + searchTerm.length + 1\n            const newSelection = currentSelection.merge({\n                'focusOffset': offset\n            })\n            if (autocompleteRef.current!.atomicBlockName) {\n                const name = autocompleteRef.current!.atomicBlockName\n                insertAutocompleteSuggestionAsAtomicBlock(name, newSelection as SelectionState, item.value)\n            } else {\n                insertAutocompleteSuggestionAsText(newSelection as SelectionState, item.value)\n            }\n        }\n        handleAutocompleteClosed()\n    }\n\n    const handleAutocompleteClosed = () => {\n        clearSearch()\n        setSelectedIndex(0)\n        refocus()\n    }\n\n    const getAutocompleteItems = (): TAutocompleteItem[] => {\n        if (searchTerm.length < autocompleteMinSearchCharCount) {\n            return []\n        }\n        return autocompleteRef.current!.items\n            .filter(item => (item.keys.filter(key => key.includes(searchTerm)).length > 0))\n            .splice(0, autocompleteLimit)\n    }\n\n    const handleChange = (state: EditorState) => {\n        setEditorState(state)\n    }\n\n    const handleBeforeInput = (chars: string, editorState: EditorState): DraftHandleValue => {\n        if (chars === \" \" && searchTerm.length) {\n            clearSearch()\n        } else if (autocompleteSelectionStateRef.current) {\n            setSearchTerm(searchTerm + chars)\n        } else {\n            const strategy = findAutocompleteStrategy(chars)\n            if (strategy) {\n                autocompleteRef.current = strategy\n                updateAutocompletePosition()\n            }\n        }\n        return isMaxLengthHandled(editorState, 1)\n    }\n\n    const handleEditorFocus = () => {\n        handleFocus()\n        if (isFocusedWithMouse.current === true) {\n            isFocusedWithMouse.current = false\n            return\n        }\n        const nextEditorState = EditorState.forceSelection(editorState, editorState.getSelection())\n        setTimeout(() => (setEditorState(EditorState.moveFocusToEnd(nextEditorState))), 0)\n    }\n\n    const handlePlaceholderFocus = () => {\n        if (isFirstFocus.current === false) {\n            focusEditor()\n            return\n        }\n        handleFocus()\n        isFirstFocus.current = false\n    }\n\n    const handleFocus = () => {\n        focusEditor()\n        if (props.onFocus) {\n            props.onFocus()\n        }\n    }\n\n    const focusEditor = () => {\n        setFocus(true)\n        setTimeout(() => editorRef.current?.focus(), 0)\n    }\n\n    const handleBlur = () => {\n        isFocusedWithMouse.current = false\n        setFocus(false)\n        if (props.onBlur) {\n            props.onBlur()\n        }\n\n        if (!state.anchorUrlPopover) {\n            setState({\n                ...state,\n                toolbarPosition: undefined\n            })\n        }\n    }\n\n    const handleMouseDown = () => {\n        isFocusedWithMouse.current = true\n    }\n\n    const handleClearFormat = () => {\n        if (customStyleMapRef.current === undefined) {\n            return\n        }\n        const withoutStyles = clearInlineStyles(editorState, customStyleMapRef.current)\n        const selectionInfo = getSelectionInfo(editorState)\n        const newEditorState = EditorState.push(editorState, withoutStyles, 'change-inline-style')\n        setEditorState(RichUtils.toggleBlockType(newEditorState, selectionInfo.blockType))\n    }\n\n    const handleSave = () => {\n        if (props.onSave) {\n            props.onSave(JSON.stringify(convertToRaw(editorState.getCurrentContent())))\n        }\n    }\n\n    const handleInsertAtomicBlockSync = (name: string, data: any) => {\n        const block = atomicBlockExists(name, props.customControls)\n        if (!block) {\n            return\n        }\n        const newEditorState = insertAtomicBlock(editorState, block.name.toUpperCase(), data, {\n            selection: editorState.getCurrentContent().getSelectionAfter()\n        })\n        updateStateForPopover(newEditorState)\n    }\n\n    const handleInsertAtomicBlockAsync = (name: string, promise: Promise<TAsyncAtomicBlockResponse>, placeholder?: string) => {\n        const selection = insertAsyncAtomicBlockPlaceholder(name, placeholder)\n        const offset = selection.getFocusOffset() + 1\n        const newSelection = selection.merge({\n            'focusOffset': offset\n        })\n\n        promise.then(response => {\n            const newEditorState = insertAtomicBlock(editorStateRef.current!, name, response.data, {\n                selection: newSelection\n            })\n            handleChange(newEditorState)\n        }).catch(error => {\n            if (error) {\n                return\n            }\n            const newContentState = Modifier.removeRange(editorStateRef.current!.getCurrentContent(),\n                newSelection as SelectionState, \"forward\")\n            handleChange(EditorState.push(editorStateRef.current!, newContentState, \"remove-range\"))\n        })\n    }\n\n    const insertAsyncAtomicBlockPlaceholder = (name: string, placeholder?: string): SelectionState => {\n        const placeholderName = placeholder || name + \"...\"\n        const currentContentState = editorStateRef.current!.getCurrentContent()\n        const entityKey = currentContentState.createEntity(\"ASYNC_ATOMICBLOCK\", 'IMMUTABLE').getLastCreatedEntityKey()\n        const contentState = Modifier.insertText(editorStateRef.current!.getCurrentContent(),\n            currentContentState.getSelectionAfter(),\n            placeholderName,\n            undefined,\n            entityKey)\n\n        const selection = currentContentState.getSelectionAfter()\n        const newEditorState = EditorState.push(editorStateRef.current!, contentState, \"insert-characters\")\n        handleChange(newEditorState)\n        return selection\n    }\n\n    const handleKeyCommand = (command: DraftEditorCommand | string, editorState: EditorState): DraftHandleValue => {\n        const newState = RichUtils.handleKeyCommand(editorState, command)\n        if (newState) {\n            handleChange(newState)\n            return \"handled\"\n        }\n        else {\n            if (command.includes(\"mui-autocomplete\")) {\n                if (command === \"mui-autocomplete-insert\") {\n                    handleAutocompleteSelected()\n                }\n                if (command === \"mui-autocomplete-end\") {\n                    handleAutocompleteClosed()\n                }\n                return \"handled\"\n            }\n            if (props.keyCommands) {\n                const keyCommand = props.keyCommands.find(comm => comm.name === command)\n                if (keyCommand) {\n                    const newState = keyCommand.callback(editorState)\n                    handleChange(newState)\n                    return \"handled\"\n                }\n            }\n        }\n        return \"not-handled\"\n    }\n\n    const handleCustomClick = (style: any, id: string) => {\n        if (!props.customControls) {\n            return\n        }\n        for (let control of props.customControls) {\n            if (control.name.toUpperCase() === style) {\n                if (control.onClick) {\n                    setTimeout(() => editorRef.current?.blur(), 0)\n                    const newState = control.onClick(editorState, control.name, document.getElementById(id))\n                    if (newState) {\n                        if (newState.getSelection().isCollapsed()) {\n                            setEditorState(newState)\n                        }\n                        else {\n                            updateStateForPopover(newState)\n                        }\n                    }\n                    else {\n                        if (!editorState.getSelection().isCollapsed()) {\n                            refocus()\n                        }\n                    }\n                }\n                break\n            }\n        }\n    }\n\n    const handleUndo = () => {\n        setEditorState(EditorState.undo(editorState))\n    }\n\n    const handleRedo = () => {\n        setEditorState(EditorState.redo(editorState))\n    }\n\n    const handlePrompt = (lastState: EditorState, type: \"link\" | \"media\", inlineMode?: boolean) => {\n        const selectionInfo = getSelectionInfo(lastState)\n        const contentState = lastState.getCurrentContent()\n        const linkKey = selectionInfo.linkKey\n        let data = undefined\n        if (linkKey) {\n            const linkInstance = contentState.getEntity(linkKey)\n            data = linkInstance.getData()\n        }\n        setState({\n            urlData: data,\n            urlKey: linkKey,\n            toolbarPosition: !inlineMode ? undefined : state.toolbarPosition,\n            anchorUrlPopover: !inlineMode ? document.getElementById(`${editorId}-${type}-control-button`)!\n                : document.getElementById(`${editorId}-${type}-control-button-toolbar`)!,\n            urlIsMedia: type === \"media\" ? true : undefined\n        })\n    }\n\n    const handlePromptForLink = (inlineMode?: boolean) => {\n        const selection = editorState.getSelection()\n\n        if (!selection.isCollapsed()) {\n            handlePrompt(editorState, \"link\", inlineMode)\n        }\n    }\n\n    const handlePromptForMedia = (inlineMode?: boolean, newState?: EditorState) => {\n        const lastState = newState || editorState\n        handlePrompt(lastState, \"media\", inlineMode)\n    }\n\n    const handleConfirmPrompt = (isMedia?: boolean, ...args: any) => {\n        if (isMedia) {\n            confirmMedia(...args)\n            return\n        }\n        confirmLink(...args)\n    }\n\n    const handleToolbarClick = (style: string, type: string, id: string, inlineMode?: boolean) => {\n        if (type === \"inline\") {\n            return toggleInlineStyle(style)\n        }\n        if (type === \"block\") {\n            return toggleBlockType(style)\n        }\n        switch (style) {\n            case \"UNDO\":\n                handleUndo()\n                break\n            case \"REDO\":\n                handleRedo()\n                break\n            case \"LINK\":\n                handlePromptForLink(inlineMode)\n                break\n            case \"IMAGE\":\n                handlePromptForMedia(inlineMode)\n                break\n            case \"clear\":\n                handleClearFormat()\n                break\n            case \"save\":\n                handleSave()\n                break\n            default:\n                handleCustomClick(style, id)\n        }\n    }\n\n    const handlePastedText = (text: string, _html: string | undefined, editorState: EditorState): DraftHandleValue => {\n        return isMaxLengthHandled(editorState, text.length)\n    }\n\n    const handleReturn = (_e: any, editorState: EditorState): DraftHandleValue => {\n        return isMaxLengthHandled(editorState, 1)\n    }\n\n    const isMaxLengthHandled = (editorState: EditorState, nextLength: number): DraftHandleValue => {\n        const currentLength = editorState.getCurrentContent().getPlainText('').length\n        return isGreaterThan(currentLength + nextLength, props.maxLength) ? \"handled\" : \"not-handled\"\n    }\n\n    const toggleMouseUpListener = (addAfter = false) => {\n        const editor: HTMLElement = (editorRef.current as any)?.editor\n        if (!editor) {\n            return\n        }\n        editor.removeEventListener(\"mouseup\", handleMouseUp)\n        if (addAfter) {\n            editor.addEventListener(\"mouseup\", handleMouseUp)\n        }\n    }\n\n    const removeLink = () => {\n        const selection = editorState.getSelection()\n        setEditorState(RichUtils.toggleLink(editorState, selection, null))\n    }\n\n    const confirmLink = (url?: string) => {\n        const { urlKey } = state\n        if (!url) {\n            if (urlKey) {\n                removeLink()\n            }\n            dismissPopover()\n            return\n        }\n\n        const contentState = editorState.getCurrentContent()\n        let replaceEditorState = editorState\n        const data = {\n            url: url,\n            className: classes.anchorLink\n        }\n\n        if (urlKey) {\n            contentState.replaceEntityData(urlKey, data)\n            replaceEditorState = EditorState.push(editorState, contentState, \"apply-entity\")\n        }\n        else {\n            const contentStateWithEntity = contentState.createEntity('LINK', 'MUTABLE', data)\n            const entityKey = contentStateWithEntity.getLastCreatedEntityKey()\n            const newEditorState = EditorState.set(editorState, { currentContent: contentStateWithEntity })\n            replaceEditorState = RichUtils.toggleLink(\n                newEditorState,\n                newEditorState.getSelection(),\n                entityKey)\n        }\n        updateStateForPopover(replaceEditorState)\n    }\n\n    const removeMedia = () => {\n        const blockKey = editorState.getSelection().getStartKey()\n        const contentState = editorState.getCurrentContent()\n        const mediaBlock = contentState.getBlockForKey(blockKey)\n        const newContentState = removeBlockFromMap(editorState, mediaBlock)\n        const newEditorState = EditorState.push(editorState, newContentState, \"remove-range\")\n        setEditorState(newEditorState)\n    }\n\n    const confirmMedia = (url?: string, width?: number, height?: number, alignment?: TAlignment, type?: TMediaType) => {\n        const { urlKey } = state\n        if (!url) {\n            if (urlKey) {\n                removeMedia()\n            }\n            dismissPopover()\n            return\n        }\n\n        const contentState = editorState.getCurrentContent()\n        const data = {\n            url: url,\n            width: width,\n            height: height,\n            alignment: alignment,\n            type: type\n        }\n\n        if (urlKey) {\n            contentState.replaceEntityData(urlKey, data)\n            const newEditorState = EditorState.push(editorState, contentState, \"apply-entity\")\n            updateStateForPopover(EditorState.forceSelection(newEditorState, newEditorState.getCurrentContent().getSelectionAfter()))\n        }\n        else {\n            const newEditorState = insertAtomicBlock(editorState, \"IMAGE\", data)\n            updateStateForPopover(EditorState.forceSelection(newEditorState, newEditorState.getCurrentContent().getSelectionAfter()))\n        }\n        setFocusMediaKey(\"\")\n    }\n\n    const updateStateForPopover = (editorState: EditorState) => {\n        setEditorState(editorState)\n        dismissPopover()\n    }\n\n    const dismissPopover = () => {\n        refocus()\n        setState({\n            ...state,\n            anchorUrlPopover: undefined,\n            urlKey: undefined,\n            urlIsMedia: undefined,\n            urlData: undefined\n        })\n    }\n\n    const refocus = () => {\n        setTimeout(() => editorRef.current?.blur(), 0)\n        setTimeout(() => editorRef.current?.focus(), 1)\n    }\n\n    const toggleBlockType = (blockType: string) => {\n        setEditorState(\n            RichUtils.toggleBlockType(\n                editorState,\n                blockType\n            )\n        )\n    }\n\n    const toggleInlineStyle = (inlineStyle: string) => {\n        setEditorState(\n            RichUtils.toggleInlineStyle(\n                editorState,\n                inlineStyle\n            )\n        )\n    }\n\n    const focusMedia = (block: ContentBlock) => {\n        const newSeletion = SelectionState.createEmpty(block.getKey())\n        const newEditorState = EditorState.forceSelection(editorStateRef.current!, newSeletion)\n        editorStateRef.current = newEditorState\n        setFocusMediaKey(block.getKey())\n        setEditorState(newEditorState)\n        handlePromptForMedia(false, newEditorState)\n    }\n\n    const getStyleMap = (): DraftStyleMap => {\n        if (customStyleMapRef.current === undefined) {\n            setupStyleMap()\n        }\n        return customStyleMapRef.current!\n    }\n\n    const setupStyleMap = () => {\n        const customStyleMap = JSON.parse(JSON.stringify(styleRenderMap))\n        props.customControls?.filter(control => control.type === \"inline\" && control.inlineStyle)\n            .forEach(control => {\n                customStyleMap[control.name.toUpperCase()] = control.inlineStyle\n            })\n        customStyleMapRef.current = customStyleMap\n    }\n\n    const getBlockMap = (): DraftBlockRenderMap => {\n        if (customBlockMapRef.current === undefined) {\n            setupBlockMap()\n        }\n        return customBlockMapRef.current!\n    }\n\n    const setupBlockMap = () => {\n        const customBlockMap: any = {}\n        props.customControls?.filter(control => control.type === \"block\" && control.blockWrapper)\n            .forEach(control => {\n                customBlockMap[control.name.toUpperCase()] = {\n                    element: \"div\",\n                    wrapper: control.blockWrapper\n                }\n            })\n        customBlockMapRef.current = DefaultDraftBlockRenderMap.merge(blockRenderMap, Immutable.Map(customBlockMap))\n    }\n\n    const blockRenderer = (contentBlock: ContentBlock) => {\n        const blockType = contentBlock.getType()\n        if (blockType === 'atomic') {\n            const contentState = editorState.getCurrentContent()\n            const entity = contentBlock.getEntityAt(0)\n            if (entity) {\n                const type = contentState.getEntity(entity).getType()\n                if (type === \"IMAGE\") {\n                    return {\n                        component: Media,\n                        editable: false,\n                        props: {\n                            onClick: focusMedia,\n                            readOnly: props.readOnly,\n                            focusKey: focusMediaKey\n                        }\n                    }\n                } else {\n                    const block = atomicBlockExists(type.toLowerCase(), props.customControls)\n                    if (block) {\n                        return {\n                            component: block.atomicComponent,\n                            editable: false,\n                            props: contentState.getEntity(contentBlock.getEntityAt(0)).getData()\n                        }\n                    }\n                }\n            }\n        }\n        return null\n    }\n\n    const styleRenderer = (style: any): React.CSSProperties => {\n        const customStyleMap = getStyleMap()\n        const styleNames = style.toJS()\n        return styleNames.reduce((styles: any, styleName: string) => {\n            styles = customStyleMap[styleName]\n            return styles\n        }, {})\n    }\n\n    const insertAtomicBlock = (editorState: EditorState, type: string, data: any, options?: any) => {\n        const contentState = editorState.getCurrentContent()\n        const contentStateWithEntity = contentState.createEntity(type, 'IMMUTABLE', data)\n        const entityKey = contentStateWithEntity.getLastCreatedEntityKey()\n        const newEditorStateRaw = EditorState.set(editorState, {\n            currentContent: contentStateWithEntity,\n            ...options\n        })\n        return AtomicBlockUtils.insertAtomicBlock(newEditorStateRaw, entityKey, ' ')\n    }\n\n    const getAutocompleteKeyEvent = (keyboardEvent: React.KeyboardEvent<{}>): string | null => {\n        const itemsLength = getAutocompleteItems().length\n        const limit = autocompleteLimit > itemsLength ? itemsLength : autocompleteLimit\n        switch (keyboardEvent.key) {\n            case \"ArrowDown\":\n                if ((selectedIndex === 0 && itemsLength === 1) || (selectedIndex + 1 === limit)) {\n                    setSelectedIndex(0)\n                } else {\n                    setSelectedIndex(selectedIndex + 1 < limit ? selectedIndex + 1 : selectedIndex)\n                }\n                return \"mui-autocomplete-navigate\"\n            case \"ArrowUp\":\n                if (selectedIndex) {\n                    setSelectedIndex(selectedIndex - 1)\n                } else {\n                    setSelectedIndex(limit - 1)\n                }\n                return \"mui-autocomplete-navigate\"\n            case \"Enter\":\n                return \"mui-autocomplete-insert\"\n            case \"Escape\":\n                return \"mui-autocomplete-end\"\n            default:\n                return null\n        }\n    }\n\n    const updateSearchTermForKeyBinding = (keyBinding: DraftEditorCommand | null) => {\n        const text = editorStateRef.current!.getCurrentContent().getLastBlock().getText()\n\n        if (keyBinding === \"backspace\"\n            && autocompleteRef.current\n            && text.substr(text.length - 1) === autocompleteRef.current.triggerChar) {\n            clearSearch()\n        } else if (autocompletePositionRef.current\n            && keyBinding === \"backspace\"\n            && searchTerm.length) {\n            setSearchTerm(searchTerm.substr(0, searchTerm.length - 1))\n        } else if (!autocompletePositionRef.current &&\n            (keyBinding === \"backspace\"\n                || keyBinding === \"split-block\")) {\n            clearSearch()\n        }\n    }\n\n    const keyBindingFn = (e: React.KeyboardEvent<{}>): string | null => {\n        if (hasCommandModifier(e) && props.keyCommands) {\n            const comm = props.keyCommands.find(comm => comm.key === e.keyCode)\n            if (comm) {\n                return comm.name\n            }\n        }\n        if (searchTerm) {\n            const autocompleteEvent = getAutocompleteKeyEvent(e)\n            if (autocompleteEvent) {\n                return autocompleteEvent\n            }\n        }\n        const keyBinding = getDefaultKeyBinding(e)\n        updateSearchTermForKeyBinding(keyBinding)\n\n        return keyBinding\n    }\n\n    const renderToolbar = props.toolbar === undefined || props.toolbar\n    const inlineToolbarControls = props.inlineToolbarControls || defaultInlineToolbarControls\n    const editable = props.readOnly === undefined || !props.readOnly\n    let className = \"\"\n    let placeholder: React.ReactElement | null = null\n    if (!focus) {\n        const contentState = editorState.getCurrentContent()\n        if (!contentState.hasText()) {\n            placeholder = (\n                <div\n                    className={classNames(classes.editorContainer, classes.placeHolder, {\n                        [classes.error]: props.error\n                    })}\n                    tabIndex={0}\n                    onFocus={handlePlaceholderFocus}\n                >\n                    {props.label || \"\"}\n                </div>\n            )\n            className = classes.hidePlaceholder\n        }\n    }\n\n    return (\n        <div id={`${editorId}-root`} className={classes.root}>\n            <div id={`${editorId}-container`} className={classNames(classes.container, {\n                [classes.inheritFontSize]: props.inheritFontSize\n            })}>\n                {props.autocomplete && autocompletePositionRef.current ?\n                    <Autocomplete\n                        items={getAutocompleteItems()}\n                        top={autocompletePositionRef.current!.top}\n                        left={autocompletePositionRef.current!.left}\n                        onClick={handleAutocompleteSelected}\n                        selectedIndex={selectedIndex}\n                    />\n                    : null}\n                {props.inlineToolbar && editable && state.toolbarPosition ?\n                    <Paper className={classes.inlineToolbar} style={{\n                        top: state.toolbarPosition.top,\n                        left: state.toolbarPosition.left\n                    }}>\n                        <Toolbar\n                            id={editorId}\n                            editorState={editorState}\n                            onClick={handleToolbarClick}\n                            controls={inlineToolbarControls}\n                            customControls={customControls}\n                            inlineMode={true}\n                            isActive={true}\n                        />\n                    </Paper>\n                    : null}\n                {renderToolbar ?\n                    <Toolbar\n                        id={editorId}\n                        editorState={editorState}\n                        onClick={handleToolbarClick}\n                        controls={controls}\n                        customControls={customControls}\n                        className={classes.toolbar}\n                        disabled={!editable}\n                        size={props.toolbarButtonSize}\n                        isActive={focus}\n                    />\n                    : null}\n                {placeholder}\n                <div id={`${editorId}-editor`} className={classes.editor}>\n                    <div id={`${editorId}-editor-container`} className={classNames(className, classes.editorContainer, {\n                        [classes.editorReadOnly]: !editable,\n                        [classes.error]: props.error\n                    })} onMouseDown={handleMouseDown} onBlur={handleBlur}>\n                        <Editor\n                            blockRenderMap={getBlockMap()}\n                            blockRendererFn={blockRenderer}\n                            customStyleFn={styleRenderer}\n                            editorState={editorState}\n                            onChange={handleChange}\n                            onFocus={handleEditorFocus}\n                            readOnly={props.readOnly}\n                            handleKeyCommand={handleKeyCommand}\n                            handleBeforeInput={handleBeforeInput}\n                            handlePastedText={handlePastedText}\n                            handleReturn={handleReturn}\n                            keyBindingFn={keyBindingFn}\n                            ref={editorRef}\n                            {...props.draftEditorProps}\n                        />\n                    </div>\n                </div>\n                {state.anchorUrlPopover ?\n                    <UrlPopover\n                        data={state.urlData}\n                        anchor={state.anchorUrlPopover}\n                        onConfirm={handleConfirmPrompt}\n                        isMedia={state.urlIsMedia}\n                    />\n                    : null}\n            </div>\n        </div>\n    )\n}\n\nexport default withStyles(styles, { withTheme: true, name: \"MUIRichTextEditor\" })(forwardRef(MUIRichTextEditor))\n"],"names":["ToolbarButton","props","size","inlineMode","toolbarId","elemId","editorId","id","label","sharedProps","onMouseDown","e","preventDefault","onClick","style","type","disabled","icon","React","IconButton","color","active","component","getSelectionInfo","editorState","selection","getSelection","startOffset","getStartOffset","currentContent","getCurrentContent","contentBlock","getBlockForKey","getStartKey","currentStyle","getCurrentInlineStyle","linkKey","getEntityAt","entityType","getEntity","getType","inlineStyle","blockType","block","removeBlockFromMap","contentState","removeBlockContentState","Modifier","removeRange","SelectionState","anchorKey","getKey","anchorOffset","focusKey","focusOffset","getLength","blockMap","getBlockMap","delete","merge","selectionAfter","getSelectionAfter","atomicBlockExists","name","controls","find","control","undefined","atomicComponent","isGreaterThan","value","maxValue","clearInlineStyles","customStyles","styles","concat","Object","getOwnPropertyNames","reduce","newContentState","removeInlineStyle","getEditorBounds","editor","fakeClientRect","getVisibleSelectionRect","window","selectionRect","top","left","editorRect","getBoundingClientRect","getLineNumber","currentBlockKey","keySeq","findIndex","k","STYLE_TYPES","TitleIcon","FormatBoldIcon","FormatItalicIcon","FormatUnderlinedIcon","StrikethroughIcon","HighlightIcon","UndoIcon","RedoIcon","InsertLinkIcon","PhotoLibraryIcon","FormatListBulletedIcon","FormatListNumberedIcon","FormatQuoteIcon","CodeIcon","FormatClearIcon","SaveIcon","Toolbar","_a","useState","availableControls","setAvailableControls","useEffect","filteredControls","filter","index","indexOf","forEach","push","customControls","customControl","toUpperCase","clickFnName","className","map","action","isActive","has","key","Link","entityKey","getData","url","MuiLink","href","target","children","shadows","createStyles","root","margin","outline","editable","cursor","&:hover","boxShadow","focused","centered","textAlign","leftAligned","rightAligned","Media","componentProps","_b","width","height","alignment","text","_c","blockProps","readOnly","classNames","classes","src","autoPlay","withStyles","withTheme","palette","fontStyle","grey","borderLeft","A100","Blockquote","spacing","backgroundColor","padding","CodeBlock","linkPopover","maxWidth","linkTextField","UrlPopover","onSizeChange","prop","intValue","parseInt","isNaN","setData","data","Popover","open","anchor","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","Grid","container","item","xs","TextField","onChange","event","defaultValue","autoFocus","InputLabelProps","shrink","isMedia","ButtonGroup","fullWidth","Button","InsertPhotoIcon","MovieIcon","FormatAlignLeft","FormatAlignCenter","FormatAlignRight","direction","justify","onConfirm","DeleteIcon","CheckIcon","minWidth","position","zIndex","Autocomplete","items","length","Paper","List","dense","ListItem","selected","selectedIndex","content","typography","fontFamily","body1","fontSize","& figure","inheritFontSize","editorContainer","editorReadOnly","borderBottom","error","hidePlaceholder","display","placeHolder","anchorLink","toolbar","inlineToolbar","blockRenderMap","Immutable","Map","blockquote","element","wrapper","code-block","styleRenderMap","STRIKETHROUGH","textDecoration","HIGHLIGHT","hasCommandModifier","KeyBindingUtil","autocompleteMinSearchCharCount","lineHeight","defaultInlineToolbarControls","findLinkEntities","callback","findEntityRanges","character","findDecoWithRegex","regex","matchArr","start","getText","exec","useEditorState","decorators","strategy","deco","decorator","CompositeDecorator","EditorState","createWithContent","convertFromRaw","JSON","parse","createEmpty","MUIRichTextEditor","ref","_d","state","setState","_f","focus","setFocus","_g","searchTerm","setSearchTerm","_h","setSelectedIndex","_j","setEditorState","_k","focusMediaKey","setFocusMediaKey","editorRef","useRef","toolbarPositionRef","editorStateRef","autocompleteRef","autocompleteSelectionStateRef","autocompletePositionRef","autocompleteLimit","autocomplete","suggestLimit","isFirstFocus","customBlockMapRef","customStyleMapRef","isFocusedWithMouse","selectionRef","end","useImperativeHandle","handleFocus","save","handleSave","insertAtomicBlock","handleInsertAtomicBlockSync","insertAtomicBlockSync","insertAtomicBlockAsync","promise","placeholder","handleInsertAtomicBlockAsync","toggleMouseUpListener","current","toolbarPosition","clearSearch","handleMouseUp","nodeName","setTimeout","isCollapsed","getEndOffset","selectionInfo","focusMedia","offsetTop","offsetLeft","handleAutocompleteSelected","itemIndex","getAutocompleteItems","currentSelection","offset","getFocusOffset","newSelection","atomicBlockName","newEditorState","withAtomicBlock","handleChange","insertAutocompleteSuggestionAsAtomicBlock","createEntity","getLastCreatedEntityKey","replaceText","insertSpaceAfter","addSpaceState","insertText","insertAutocompleteSuggestionAsText","handleAutocompleteClosed","handlePrompt","lastState","urlData","urlKey","anchorUrlPopover","document","getElementById","urlIsMedia","handlePromptForMedia","newState","handleToolbarClick","toggleInlineStyle","toggleBlockType","undo","redo","withoutStyles","RichUtils","handleClearFormat","_i","blur","updateStateForPopover","refocus","handleCustomClick","keys","includes","splice","focusEditor","onFocus","onSave","stringify","convertToRaw","insertAsyncAtomicBlockPlaceholder","then","response","catch","placeholderName","currentContentState","isMaxLengthHandled","nextLength","currentLength","getPlainText","maxLength","addAfter","removeEventListener","addEventListener","confirmLink","toggleLink","dismissPopover","replaceEditorState","replaceEntityData","contentStateWithEntity","set","confirmMedia","blockKey","mediaBlock","forceSelection","newSeletion","setupStyleMap","customStyleMap","setupBlockMap","customBlockMap","blockWrapper","DefaultDraftBlockRenderMap","options","newEditorStateRaw","AtomicBlockUtils","renderToolbar","inlineToolbarControls","hasText","tabIndex","toolbarButtonSize","onBlur","Editor","blockRendererFn","entity","toLowerCase","customStyleFn","toJS","styleName","nextEditorState","moveFocusToEnd","handleKeyCommand","command","keyCommands","keyCommand","comm","newState_1","handleBeforeInput","chars","acArray","strategies","ac","triggerChar","findAutocompleteStrategy","line","updateAutocompletePosition","handlePastedText","_html","handleReturn","_e","keyBindingFn","keyCode","autocompleteEvent","keyboardEvent","itemsLength","limit","getAutocompleteKeyEvent","keyBinding","getDefaultKeyBinding","getLastBlock","substr","draftEditorProps","args","forwardRef"],"mappings":"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"}